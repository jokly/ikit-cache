// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RandomServiceClient is the client API for RandomService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RandomServiceClient interface {
	GetRandomDataStream(ctx context.Context, in *GetRandomDataStreamRequest, opts ...grpc.CallOption) (RandomService_GetRandomDataStreamClient, error)
}

type randomServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRandomServiceClient(cc grpc.ClientConnInterface) RandomServiceClient {
	return &randomServiceClient{cc}
}

func (c *randomServiceClient) GetRandomDataStream(ctx context.Context, in *GetRandomDataStreamRequest, opts ...grpc.CallOption) (RandomService_GetRandomDataStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &RandomService_ServiceDesc.Streams[0], "/cache.RandomService/GetRandomDataStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &randomServiceGetRandomDataStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RandomService_GetRandomDataStreamClient interface {
	Recv() (*GetRandomDataStreamResponse, error)
	grpc.ClientStream
}

type randomServiceGetRandomDataStreamClient struct {
	grpc.ClientStream
}

func (x *randomServiceGetRandomDataStreamClient) Recv() (*GetRandomDataStreamResponse, error) {
	m := new(GetRandomDataStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// RandomServiceServer is the server API for RandomService service.
// All implementations must embed UnimplementedRandomServiceServer
// for forward compatibility
type RandomServiceServer interface {
	GetRandomDataStream(*GetRandomDataStreamRequest, RandomService_GetRandomDataStreamServer) error
	mustEmbedUnimplementedRandomServiceServer()
}

// UnimplementedRandomServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRandomServiceServer struct {
}

func (UnimplementedRandomServiceServer) GetRandomDataStream(*GetRandomDataStreamRequest, RandomService_GetRandomDataStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method GetRandomDataStream not implemented")
}
func (UnimplementedRandomServiceServer) mustEmbedUnimplementedRandomServiceServer() {}

// UnsafeRandomServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RandomServiceServer will
// result in compilation errors.
type UnsafeRandomServiceServer interface {
	mustEmbedUnimplementedRandomServiceServer()
}

func RegisterRandomServiceServer(s grpc.ServiceRegistrar, srv RandomServiceServer) {
	s.RegisterService(&RandomService_ServiceDesc, srv)
}

func _RandomService_GetRandomDataStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetRandomDataStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RandomServiceServer).GetRandomDataStream(m, &randomServiceGetRandomDataStreamServer{stream})
}

type RandomService_GetRandomDataStreamServer interface {
	Send(*GetRandomDataStreamResponse) error
	grpc.ServerStream
}

type randomServiceGetRandomDataStreamServer struct {
	grpc.ServerStream
}

func (x *randomServiceGetRandomDataStreamServer) Send(m *GetRandomDataStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

// RandomService_ServiceDesc is the grpc.ServiceDesc for RandomService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RandomService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cache.RandomService",
	HandlerType: (*RandomServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetRandomDataStream",
			Handler:       _RandomService_GetRandomDataStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "cache.proto",
}
